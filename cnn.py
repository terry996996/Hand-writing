# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZSd51xt1SqZkU4ZsUDWTlNiwjPr-nuNg
"""

# Commented out IPython magic to ensure Python compatibility.
# %env KERAS_BACKEND = tensorflow

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.utils import to_categorical


(x_train, y_train), (x_test, y_test) = mnist.load_data()

len(x_train)

len(y_train)

len(x_test)

len(x_test)

x_train[9487].shape

x_train[9487]

y_train[9487]

print("x_train shape:", x_train.shape)
print("y_train shape:", y_train.shape)
print("x_test shape:", x_test.shape)
print("y_test shape:", y_test.shape)

x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)

x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

print("y_train shape after to_categorical:", y_train.shape)
print("y_test shape after to_categorical:", y_test.shape)

y_train[9487]

model = Sequential()

model.add(Flatten(input_shape=(28, 28, 1)))

model.add(Dense(512, activation='relu'))

model.add(Dense(10, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

model.fit(x_train, y_train, epochs=10, batch_size=128, validation_split=0.2)

score = model.evaluate(x_test, y_test, batch_size=128)
print("Test loss:", score[0])
print("Test accuracy:", score[1])

predictions = model.predict(x_test)
predicted_classes = np.argmax(predictions, axis=1)
print(predicted_classes)

import matplotlib.pyplot as plt
from ipywidgets import interact_manual


def test(測試編號):
    plt.imshow(x_test[測試編號].reshape(28, 28), cmap='Greys')
    predicted_class = predicted_classes[測試編號]  # Get the predicted class for the specified index
    print("神經網路判斷為:", predicted_class)

def visualize_and_predict(index):
    plt.imshow(x_test[index].reshape(28, 28), cmap='Greys')
    predicted_class = predicted_classes[index]
    print("神經網路判斷為:", predicted_class)
    plt.show()

interact_manual(test, 測試編號 = (0, 9999));

model_json = model.to_json()
open('handwriting_model_architecture.json', 'w').write(model_json)
model.save_weights('handwriting_model_weights.h5')

